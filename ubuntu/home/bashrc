# -*- mode: shell-script; -*-
# ~/.bashrc: executed by bash(1) for non-login shells.
# see /usr/share/doc/bash/examples/startup-files (in the package bash-doc)
# for examples

# If not running interactively, don't do anything
case $- in
  *i*) ;;
  *) return;;
esac

# don't put duplicate lines or lines starting with space in the history.
# See bash(1) for more options
HISTCONTROL=ignoreboth

# append to the history file, don't overwrite it
shopt -s histappend

# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
HISTSIZE=1000
HISTFILESIZE=2000

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# If set, the pattern "**" used in a pathname expansion context will
# match all files and zero or more directories and subdirectories.
#shopt -s globstar

# make less more friendly for non-text input files, see lesspipe(1)
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "${debian_chroot:-}" ] && [ -r /etc/debian_chroot ]; then
  debian_chroot=$(cat /etc/debian_chroot)
fi

# set a fancy prompt (non-color, unless we know we "want" color)
case "$TERM" in
  xterm-color) color_prompt=yes;;
esac

# uncomment for a colored prompt, if the terminal has the capability; turned
# off by default to not distract the user: the focus in a terminal window
# should be on the output of commands, not on the prompt
#force_color_prompt=yes

if [ -n "$force_color_prompt" ]; then
  if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
	# We have color support; assume it's compliant with Ecma-48
	# (ISO/IEC-6429). (Lack of such support is extremely rare, and such
	# a case would tend to support setf rather than setaf.)
	color_prompt=yes
  else
	color_prompt=
  fi
fi

function add_to_path {
  if [[ ! "$PATH" =~ (^|:)"$1"(:|$) ]]; then
    PATH="$1:$PATH"
  fi
}

# Syntax: prepend_to_function <name> [statements...]
function prepend_to_function() {
  local name=$1
  shift
  local body="$@"
  eval "$(echo "${name}(){"; echo ${body}; declare -f ${name} | tail -n +3)"
}

# Syntax: append_to_function <name> [statements...]
function append_to_function() {
  local name=$1
  shift
  local body="$@"
  eval "$(declare -f ${name} | head -n -1; echo ${body}; echo '}')"
}

export VIRTUAL_ENV_DISABLE_PROMPT=1
ps_py_virtual_env() {
  if [ ! -z "$VIRTUAL_ENV" ] ; then
    local env=`basename $VIRTUAL_ENV`
    echo "$env" | awk '{print "("$1")" }'
  fi
}

ps_svn() {
  parse_svn_url | sed -e 's#^'"$(parse_svn_repository_root)"'##g' | awk '{print "["$1"]" }'
}
parse_svn_url() {
  svn info 2>/dev/null | sed -ne 's#^URL: ##p'
}
parse_svn_repository_root() {
  svn info 2>/dev/null | sed -ne 's#^Repository Root: ##p'
}

ps_user() {
  if [ "$USER" != "user" ]; then
    echo "$USER:"
  fi
}

ps_git() {
  if ! git rev-parse --git-dir > /dev/null 2>&1; then
    return 0
  fi

  local git_branch=$(git branch 2>/dev/null| sed -n '/^\*/s/^\* //p')

  if [ ! -z "$git_branch" ] ; then
    echo "$git_branch" | awk '{print "["$1"]" }'
  fi
}

if [ "$color_prompt" = yes ]; then
  NO_COLOR="\[\033[00m\]"
  YELLOW="\[\033[0;33m\]"
  PS1='${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u\[\033[00m\]:\[\033[01;34m\]\w$YELLOW$(__git_ps1)$NO_COLOR\$ '
else
  PS1='${debian_chroot:+($debian_chroot)}$(ps_user)\w $(ps_py_virtual_env)$(ps_git)$(ps_svn) \$ '
fi
unset color_prompt force_color_prompt

# If this is an xterm set the title to user@host:dir
case "$TERM" in
  xterm*|rxvt*)
    PS1="\[\e]0;${debian_chroot:+($debian_chroot)}\u: \w\a\]$PS1"
    ;;
  *)
    ;;
esac

# enable color support of ls and also add handy aliases
if [ -x /usr/bin/dircolors ]; then
  test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
  alias ls='ls --color=auto'
  alias grep='grep --color=auto'
  alias fgrep='fgrep --color=auto'
  alias egrep='egrep --color=auto'
fi

alias alert='notify-send --urgency=low -i "$([ $? = 0 ] && echo terminal || echo error)" "$(history|tail -n1|sed -e '\''s/^\s*[0-9]\+\s*//;s/[;&|]\s*alert$//'\'')"'
alias ai='sudo aptitude install'
alias af='aptitude search'
alias free='free --human --lohi'
alias df='df --human-readable'
alias ll='ls -lav --classify --human-readable --group-directories-first'
alias sreload='source ~/.bashrc'

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if ! shopt -oq posix; then
  if [ -f /usr/share/bash-completion/bash_completion ]; then
    . /usr/share/bash-completion/bash_completion
  elif [ -f /etc/bash_completion ]; then
    . /etc/bash_completion
  fi

  if [ -s "$HOME_CFG_ROOT/django_bash_completion" ]; then
    . "$HOME_CFG_ROOT/django_bash_completion"
    prepend_to_function _django_completion export PYTHONWARNINGS="ignore"
    append_to_function _django_completion unset PYTHONWARNINGS
  fi
fi

# For activate: sudo pip install virtualenvwrapper
if [ -f "/usr/local/bin/virtualenvwrapper.sh" ] ; then
  export WORKON_HOME="$HOME/.virtualenvs"
  mkdir -p $WORKON_HOME
  . "/usr/local/bin/virtualenvwrapper.sh"
fi

export NVM_DIR="$HOME/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && . "$NVM_DIR/nvm.sh"

if [ -f ~/.bashrc_private ]; then
  . ~/.bashrc_private
fi

add_to_path "$HOME/bin"
add_to_path "$UBUNTU_CFG_ROOT/bin"
add_to_path "$HOME/local/bin"
add_to_path "$HOME/.cask/bin"
add_to_path "$HOME/tools/sbt/bin"
add_to_path "$GROOVY_HOME/bin"
add_to_path "$HOME/.cabal/bin"

eval "$(thefuck --alias re)"
